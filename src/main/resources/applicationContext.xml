<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	       http://www.springframework.org/schema/context
	       http://www.springframework.org/schema/context/spring-context-3.1.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	       http://www.springframework.org/schema/tx
	       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	       http://www.springframework.org/schema/util 
	       http://www.springframework.org/schema/util/spring-util-3.1.xsd">
	       
	       
	<context:component-scan base-package="com.j.stock"/> 
	 
	
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	  <property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	 <!-- 配置数据源属性文件 --> 
	  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="locations">      
	      <list>       
	        <value>classpath:jdbc.properties</value>      
	      </list>     
	    </property>    
	  </bean> 
    
    <!-- jdbc -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">    
	    <property name="driverClassName" value="${driver}"/>    
	    <property name="url" value="${url}"/>    
	    <property name="username" value="${username}"/>    
	    <property name="password" value="${password}"/>  
	  </bean> 
	  
	  <!-- jdbc 
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />  
        <property name="url" value="jdbc:mysql://localhost:3306/stock" />  
        <property name="username" value="root" />  
        <property name="password" value="" />  
    </bean>  -->
  
  	<!-- ibatis  -->
     <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">  
     	<property name="configLocation" value="classpath:sqlMapConfig.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 启动spring事务注解，事务注解尽在此 -->  
  <tx:annotation-driven transaction-manager="transactionManager"/>  
    
  <!-- 配置事务特性  -->   
  <tx:advice id="txAdvice" transaction-manager="transactionManager">  
    <tx:attributes>  
        <tx:method name="select*" read-only="true" propagation="REQUIRED"/>  
        <tx:method name="find*" read-only="true" propagation="REQUIRED"/>  
        <tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>  
        <tx:method name="*" read-only="true"/>  
    </tx:attributes>  
  </tx:advice> 
    
  <!-- 配置事务代理拦截器    -->   
  <bean id="baseTransactionProxy" abstract="true"   
    class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">  
    <property name="transactionManager">  
      <ref bean="transactionManager"/>  
    </property>  
    <property name="transactionAttributes">  
      <props>  
        <prop key="insert*">PROPAGATION_REQUIRED</prop>  
        <prop key="update*">PROPAGATION_REQUIRED</prop>  
        <prop key="delete*">PROPAGATION_REQUIRED</prop>  
        <prop key="*">PROPAGATION_REQUIRED,readOnly</prop>      
      </props>     
    </property>  
  </bean> 
    
   <!-- 要调用的工作类 -->  
    <bean id="quartzStockJob" class="com.j.stock.quartz.QuartzJob"></bean> 
     <!-- 定义调用对象和调用对象的方法 -->  
    <bean id="jobStockTask"  
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <!-- 调用的类 -->  
        <property name="targetObject">  
            <ref bean="quartzStockJob" />  
        </property>  
        <!-- 调用类中的方法 -->  
        <property name="targetMethod">  
            <value>work</value>  
        </property>  
    </bean>  
    <!-- 定义触发时间 -->  
    <bean id="doStockTaskTime" class="org.springframework.scheduling.quartz.CronTriggerBean">  
        <property name="jobDetail">  
            <ref bean="jobStockTask" />  
        </property>  
        <!-- cron表达式 -->  
        <property name="cronExpression">  
             <value>0/600 * 0,1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,23 * * ?</value>
            <!--<value>0/5 * * * * ?</value>-->
        </property>
    </bean>

    <!-- 定义调用对象和调用对象的方法 -->
    <bean id="jobStockTask1"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject">
            <ref bean="quartzStockJob" />
        </property>
        <!-- 调用类中的方法 -->
        <property name="targetMethod">
            <value>getOneInfoWork</value>
        </property>
    </bean>
    <!-- 定义触发时间 -->
    <bean id="doStockTaskTime1" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="jobStockTask1" />
        </property>
        <!-- cron表达式 -->
        <property name="cronExpression">
            <value>0/600 * 0,1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,23 * * ?</value>
            <!--<value>0/5 * * * * ?</value>-->
        </property>
    </bean>

    <!-- 定义调用对象和调用对象的方法 -->
    <bean id="jobStockTask2"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 调用的类 -->
        <property name="targetObject">
            <ref bean="quartzStockJob" />
        </property>
        <!-- 调用类中的方法 -->
        <property name="targetMethod">
            <value>getTowInfoWork</value>
        </property>
    </bean>
    <!-- 定义触发时间 -->
    <bean id="doStockTaskTime2" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail">
            <ref bean="jobStockTask2" />
        </property>
        <!-- cron表达式 -->
        <property name="cronExpression">
            <value>0/600 * 0,1,2,3,4,5,6,7,8,9,16,17,18,19,20,21,22,23 * * ?</value>
            <!--<value>0/5 * * * * ?</value>-->
        </property>
    </bean>

    <!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->  
    <bean id="startQuertz" lazy-init="true" autowire="no" destroy-method="destroy"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <property name="triggers">  
            <list>  
                <ref bean="doStockTaskTime" />
                <!--<ref bean="doStockTaskTime1" />-->
                <!--<ref bean="doStockTaskTime2" />-->
            </list>  
        </property>  
    </bean> 
  <!-- 配置哪些类的方法需要进行事务管理  --> 
  <aop:config>  
    <aop:pointcut id="baseServiceMethods" expression="execution(* com.j.stock.service.*.*(..))"/>  
      <aop:advisor advice-ref="txAdvice" pointcut-ref="baseServiceMethods"/>  
    </aop:config>  
  <aop:aspectj-autoproxy /> 
  
</beans>